pipeline {
  agent any

  tools {
    nodejs "node"
  }

  parameters {
    string(name: 'container_name', defaultValue: 'pagina_web', description: 'Nombre del contenedor de docker.')
    string(name: 'image_name', defaultValue: 'pagina_img', description: 'Nombre de la imagene docker.')
    string(name: 'tag_image', defaultValue: 'lts', description: 'Tag de la imagen de la pÃƒÂ¡gina.')
    string(name: 'container_port', defaultValue: '80', description: 'Puerto que usa el contenedor')
  }

  stages {
    stage('install') {
      steps {
        git branch: 'master', url: 'https://github.com/pruebasAppsP/Taller_Jenkins.git'
        
        echo 'Ingreso'
        dir('frontend') {
          sh 'npm install'
        }
        echo 'Salio'
      }
    }

    stage('test') {
      steps {
        dir('frontend') {
          sh 'npm run test'
        }
      }
    }

    stage('build') {
      steps {
        dir('frontend') {
          script {
            try {
              
              sh 'docker rm ${container_name}'
              sh 'docker rmi ${image_name}:${tag_image}'
            } catch (Exception e) {
              echo 'Exception occurred: ' + e.toString()
            }
          }
          sh 'npm run build'
          sh 'docker build -t ${image_name}:${tag_image} .'
        }
      }
    }

    stage('deploy') {
      steps {
        sh 'docker run -d -p ${container_port}:80 --name ${container_name} ${image_name}:${tag_image}'
      }
    }
        /*node{
          stage('SCM') {
            git 'https://github.com/pruebasAppsP/Taller_Jenkins.git'
          }
          stage('SonarQube analysis') {
            def scannerHome = tool 'SonarScanner 4.0';
            withSonarQubeEnv('My SonarQube Server') { // If you have configured more than one global server connection, you can specify its name
              sh "C:/sonarqube-9.6.1.59531/bin/windows-x86-64/StartSonar"
            }
          }
        }*/
     
  }

}
